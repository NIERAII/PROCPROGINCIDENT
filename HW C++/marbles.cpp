#include <iostream>
#include <vector>
using namespace std;

//Глобальные переменные, объявили, чтобы не перегружать функции
int X[100]; // массив в котором лежат шарики от 1 до N (100 максимум)
unsigned c = 0; // переменная для подсчета "нужных" случаев
vector<int> arr(20); // массив в котором будут храниться перестановки и с помощью которого будем вычислять нужные нам случаи

void Swap(int a, int b)//меняет местами два элемента
{
    int t = X[a];
    X[a] = X[b];
    X[b] = t;
}
// Здесь идет алгоритм вывода всех перестановок (алгоритм генерации перестановок)

void Generate(int m, int N)
{
    if (m == N)//Если номер шага равен кол-ву шаров
    {
        // Получая очередную перестановку, помещаем её в массив
        for (int i = 0; i < N; i++) {
            arr[i] = X[i];
        }
        for (int j = 0; j < arr.size(); j++) {
            // если номер элемента совпадает с шагом, то этот случай нам подходит и мы учитываем его
            if (arr[j] == j + 1) {
                c = c + 1;
                break;
            }
        }
    }
    else
    {
        for (int j = m; j < N; j++)
        {
            Swap(m, j);//перестановка
            Generate(m + 1, N);//рекурсивный вызов функции
            Swap(m, j);//опять перестановка
        }
    }
}



int main()
{
    // Количество шаров
    int N;
    cout << "N=";
    cin >> N;//вводим кол-во шаров
    if (N > 20) {
        cout << "Exceeded limit (20)";
        return 0;
    }
    // генерация массива с элементами от 1 до 10
    for (int i = 0; i < N; i++)
        X[i] = i + 1;//так чтобы номер "действия" начинался не с "0"

    // Вызываем наш счетчик-генератор.
    Generate(0, N);
    cout << c << endl;//выводим кол-во перестановок
}